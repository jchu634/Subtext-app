name: Build for Windows With CUDA

on:
  push:
    branches: ["main"] 
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
      skip_tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false
      wipe_cache:
        description: 'Clean Cache after run'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  actions: write

jobs:
  build_and_package:
    runs-on: [self-hosted, Windows, gpu]
    env:
      WIPE_CACHE: ${{ github.event_name == 'push' || inputs.wipe_cache }}
    steps:
      - uses: actions/checkout@v4
        with:
          clean: false

      - name: Make Keyfile
        run: |
          echo "${{ secrets.KEY }}" > ./backend/key
      - name: Build App
        shell: pwsh
        run: .\bundleApp.ps1 -WithCuda -HardCodedPythonPath -HardCoded7ZipPath
      - name: Prepare Directory Name
        id: prepare_dir
        shell: pwsh
        run: |
          $date = Get-Date -Format "yyyyMMdd"
          $sha = git rev-parse --short HEAD
          $dirName = "${date}_${sha}_gpu"
          echo "DIR_NAME=$dirName" >> $env:GITHUB_ENV
      - name: Connect and Copy to SMB
        shell: pwsh
        run: |
          net use Z: \\192.168.2.1\Builds /user:"${{ secrets.SMB_USER }}" "${{ secrets.SMB_PASSWORD }}" /persistent:no
          $targetDir = "Z:\Subtext\${{ env.DIR_NAME }}"
          New-Item -Path $targetDir -ItemType Directory -Force
          Move-Item -Path "*.7z" -Destination $targetDir -ErrorAction SilentlyContinue
          Move-Item -Path "*.exe" -Destination $targetDir -ErrorAction SilentlyContinue
          net use Z: /delete
      - name: Cleanup Working Directory
        if: always()
        shell: pwsh
        run: |
          if ("${{ inputs.wipe_cache }}" -eq "true") {
            Remove-Item -Path "backend/home/frontend" -Recurse -Force -ErrorAction SilentlyContinue
            git clean -fdx -e "frontend/.next" -e "frontend/node_modules" -e "backend/venv"
          } else {
            git clean -fdx
          }

