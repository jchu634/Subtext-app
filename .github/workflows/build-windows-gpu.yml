name: Build for Windows With CUDA

on:
  push:
    branches: ["main"] 
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
      skip_tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false
      wipe_cache:
        description: 'Clean Cache after run'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  actions: write

jobs:
  build_and_package:
    runs-on: [self-hosted, Windows, gpu]
    env:
      WIPE_CACHE: ${{ github.event_name == 'push' || inputs.wipe_cache }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      
      - name: Configure Python Path
        shell: pwsh
        run: |
          # Try to find Python installation
          $pythonPath = $null
          $possiblePaths = @(
            "${env:LOCALAPPDATA}\Programs\Python\Python312"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path "$path\python.exe") {
              $pythonPath = $path
              break
            }
          }
          
          # Check if Python is already in PATH
          $pythonInPath = $false
          try {
            python --version
            $pythonInPath = $true
          } catch {
            Write-Host "Python not found in PATH"
          }
          
          # Add Python to PATH if needed
          if (-not $pythonInPath -and $pythonPath) {
            Write-Host "Adding Python to PATH: $pythonPath"
            echo "$pythonPath" >> $env:GITHUB_PATH
            echo "$pythonPath\Scripts" >> $env:GITHUB_PATH
          } elseif (-not $pythonPath) {
            throw "Python installation not found!"
          }

      - name: Make Keyfile
        run: |
          echo "${{ secrets.KEY }}" > ./backend/key
      - name: Build Frontend
        shell: pwsh
        run: .\bundleApp.ps1 -WithCuda
      - name: Prepare Directory Name
        id: prepare_dir
        shell: pwsh
        run: |
          $date = Get-Date -Format "yyyyMMdd"
          $sha = git rev-parse --short HEAD
          $dirName = "${date}_${sha}_gpu"
          echo "DIR_NAME=$dirName" >> $env:GITHUB_ENV
      - name: Connect and Copy to SMB
        shell: pwsh
        run: |
          net use Z: \\192.168.2.1\Builds /user:"${{ secrets.SMB_USER }}" "${{ secrets.SMB_PASSWORD }}" /persistent:no
          $targetDir = "Z:\Subtext\${{ env.DIR_NAME }}"
          New-Item -Path $targetDir -ItemType Directory -Force
          Move-Item -Path "*.7z" -Destination $targetDir -ErrorAction SilentlyContinue
          Move-Item -Path "*.exe" -Destination $targetDir -ErrorAction SilentlyContinue
          net use Z: /delete
      - name: Cleanup Working Directory
        if: always()
        shell: pwsh
        run: |
          if ("${{ inputs.wipe_cache }}" -eq "true") {
            Remove-Item -Path "backend/home/frontend" -Recurse -Force -ErrorAction SilentlyContinue
            git clean -fdx -e "frontend/.next" -e "frontend/node_modules" -e "backend/venv"
          } else {
            git clean -fdx
          }

